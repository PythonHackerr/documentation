"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5338],{970:function(e,t,a){a.d(t,{Z:function(){return s}});var n=a(7294),r="alert_19nB",o="alertWarning_1tiz",i="alertInfo_1EfW",l="alertTip_1W6d",p="alertSuccess_7EZp",s=function(e){var t=e.children,a=e.alertType;return"warning"===a?n.createElement("div",{className:"alert "+r+" "+o,role:"alert"},t):"info"===a?n.createElement("div",{className:"alert "+r+" "+i,role:"alert"},t):"tip"===a?n.createElement("div",{className:"alert "+r+" "+l,role:"alert"},t):"success"===a?n.createElement("div",{className:"alert "+r+" "+p,role:"alert"},t):null}},817:function(e,t,a){a.r(t),a.d(t,{contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return m},metadata:function(){return u},toc:function(){return h}});var n=a(7462),r=a(3366),o=a(7294),i=a(3905),l=a(970),p=a(1721),s=a(8621),d=function(e){function t(){return e.apply(this,arguments)||this}(0,p.Z)(t,e);var a=t.prototype;return a.componentDidMount=function(){s.Z.initialize("org_test_pk_7e1e22718af02cb9ed4a01233556999c2c02c947");var e=new s.Z.ui.map({container:"map",center:[-73.9911,40.7342],zoom:14});s.Z.ui.marker({text:"Radar HQ"}).setLngLat([-73.9910078,40.7342465]).addTo(e)},a.render=function(){return o.createElement("div",{id:"map-container",style:{height:"20rem",margin:"1rem 0",position:"relative",width:"95%"}},o.createElement("div",{id:"map",style:{bottom:0,position:"absolute",top:0,width:"100%"}}))},t}(o.Component),m={title:"Maps"},c=void 0,u={unversionedId:"maps/maps",id:"maps/maps",isDocsHomePage:!1,title:"Maps",description:"Radar Maps is a cost-effective alternative to Google Maps Platform and Mapbox.",source:"@site/docs/maps/maps.mdx",sourceDirName:"maps",slug:"/maps/maps",permalink:"/documentation/maps/maps",editUrl:"https://github.com/radarlabs/docs/edit/main/docs/maps/maps.mdx",tags:[],version:"current",frontMatter:{title:"Maps"},sidebar:"defaultSidebar",previous:{title:"Routing APIs",permalink:"/documentation/maps/routing"},next:{title:"Autocomplete",permalink:"/documentation/maps/autocomplete"}},h=[{value:"How it works",id:"how-it-works",children:[]},{value:"Configuration",id:"configuration",children:[{value:"Styles",id:"styles",children:[]}]},{value:"Quickstart",id:"quickstart",children:[{value:"JavaScript",id:"javascript",children:[]},{value:"React",id:"react",children:[]},{value:"Vue",id:"vue",children:[]},{value:"React Native",id:"react-native",children:[]},{value:"iOS",id:"ios",children:[]},{value:"Android",id:"android",children:[]}]},{value:"Coverage",id:"coverage",children:[]},{value:"Support",id:"support",children:[]}],k={toc:h};function g(e){var t=e.components,o=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},k,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Radar Maps is a cost-effective alternative to Google Maps Platform and Mapbox."),(0,i.kt)("p",null,"For example, here's a Radar Map displaying a marker for Radar HQ:"),(0,i.kt)(d,{mdxType:"Map"}),(0,i.kt)("h2",{id:"how-it-works"},"How it works"),(0,i.kt)("p",null,"To use Radar Maps, simply initialize the Radar SDK with your publishable key, and specify the container to render the map into."),(0,i.kt)("p",null,"Radar Maps is an extension of the ",(0,i.kt)("a",{parentName:"p",href:"https://maplibre.org"},"Maplibre GL JS")," library. See their ",(0,i.kt)("a",{parentName:"p",href:"https://maplibre.org/maplibre-gl-js/docs/API/"},"docs")," for additional customization info."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"When creating a new Radar map, you can configure it with any of the ",(0,i.kt)("a",{parentName:"p",href:"https://maplibre.org/maplibre-gl-js/docs/API/types/maplibregl.MapOptions/"},"MapOptions")," available in MapLibre."),(0,i.kt)("p",null,"The minimum recommended configuration options are the following:"),(0,i.kt)("table",{class:"full-width-table"},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",null,"Name"),(0,i.kt)("th",{class:"no-wrap"},"Default"),(0,i.kt)("th",{class:"no-wrap"},"Possible Values"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"container")),(0,i.kt)("td",{class:"no-wrap"},"none (required)"),(0,i.kt)("td",{class:"no-wrap"},"string | HTMLElement"),(0,i.kt)("td",null,"The ",(0,i.kt)("code",null,"id")," or HTML element the map will be rendered into. ",(0,i.kt)("br",null)," ",(0,i.kt)("br",null),(0,i.kt)("em",null,"The width and height of this element will determine the size of the map"))),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"style")),(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"radar-default-v1")),(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"radar-default-v1"),", ",(0,i.kt)("br",null),(0,i.kt)("code",null,"radar-light-v1"),", ",(0,i.kt)("br",null),(0,i.kt)("code",null,"radar-dark-v1")),(0,i.kt)("td",null,"The map's style. See below for more details on map styles")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"center")),(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("em",null,"IP Geolocation")),(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"[longitude, latitude]")),(0,i.kt)("td",null,"The initial map center point.")),(0,i.kt)("tr",null,(0,i.kt)("td",null,(0,i.kt)("code",null,"zoom")),(0,i.kt)("td",{class:"no-wrap"},"11"),(0,i.kt)("td",{class:"no-wrap"},"number"),(0,i.kt)("td",null,"The initial map zoom level.")))),(0,i.kt)(l.Z,{alertType:"tip",mdxType:"Alert"},"Web-based maps will be automatically centered based on the user's IP Geolocation unless center and zoom properties are specified."),(0,i.kt)("h3",{id:"styles"},"Styles"),(0,i.kt)("p",null,"Radar provides several out-of-the box styles tailored to various use cases."),(0,i.kt)("table",{class:"full-width-table"},(0,i.kt)("thead",null,(0,i.kt)("tr",null,(0,i.kt)("th",{class:"no-wrap"},"Style"),(0,i.kt)("th",{style:{width:"400px"}},"Preview"),(0,i.kt)("th",null,"Description"))),(0,i.kt)("tbody",null,(0,i.kt)("tr",null,(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"radar-default-v1")),(0,i.kt)("td",{style:{width:"400px"}},(0,i.kt)("img",{width:"400",src:"https://images.ctfassets.net/f2vbu16fzuly/1wBEmydpkmmP5eI23nHD6s/1a628636b92095173b946da3a3e6204e/radar-default-theme.png?w=1200"})),(0,i.kt)("td",null,"Radar's default map style, showcasing detailed street-level information about roads and nearby places. A general purpose map suitable for most use cases.")),(0,i.kt)("tr",null,(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"radar-light-v1")),(0,i.kt)("td",{style:{width:"400px"}},(0,i.kt)("img",{width:"400",src:"https://images.ctfassets.net/f2vbu16fzuly/39PJYbWntW8cK4NnP33cWK/ae8ad63d9e300a3c8d61ce47f7323914/radar-light-theme.png?w=1200"})),(0,i.kt)("td",null,"A light monochrome map style, useful for highlighting your own information or visualizations.")),(0,i.kt)("tr",null,(0,i.kt)("td",{class:"no-wrap"},(0,i.kt)("code",null,"radar-dark-v1")),(0,i.kt)("td",{style:{width:"400px"}},(0,i.kt)("img",{width:"400",src:"https://images.ctfassets.net/f2vbu16fzuly/UhZJgEo57528CJRQCj0fT/3a2e2dc29205da1a9ea8e60b52dcafa6/radar-dark-theme.png?w=1200"})),(0,i.kt)("td",null,"A dark monochrome map style, useful for highlighting your own information or visualizations in a dark mode setting.")))),(0,i.kt)("h2",{id:"quickstart"},"Quickstart"),(0,i.kt)("p",null,"First, ",(0,i.kt)("a",{parentName:"p",href:"https://radar.com/signup"},"sign up")," for Radar and get an API key."),(0,i.kt)("p",null,"Then, get started with the sample code below."),(0,i.kt)("p",null,"Happy mapping!"),(0,i.kt)("h3",{id:"javascript"},"JavaScript"),(0,i.kt)("p",null,"To create a simple web page with a map:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />\n    <link href="https://js.radar.com/v4.0.0/radar.css" rel="stylesheet">\n    <script src="https://js.radar.com/v4.0.0/radar.min.js"><\/script>\n  </head>\n\n  <body>\n    <div id="map" style="width: 100%; height: 500px;" />\n\n    <script type="text/javascript">\n      Radar.initialize(\'prj_live_pk_...\');\n\n      // create a new map\n      const map = Radar.ui.map({\n        container: \'map\',\n        style: \'radar-default-v1\',\n        center: [-73.9911, 40.7342], // NYC\n        zoom: 11\n      });\n\n      // create marker and add to map\n      const marker = Radar.ui.marker({ text: \'Radar HQ\' })\n        .setLngLat([-73.9910078, 40.7342465])\n        .addTo(map);\n    <\/script>\n  </body>\n</html>\n')),(0,i.kt)("h3",{id:"react"},"React"),(0,i.kt)("p",null,"To create a ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev"},"React")," component with a map:"),(0,i.kt)(l.Z,{alertType:"info",mdxType:"Alert"},"The Radar SDK has a dependency on maplibre-gl for the map rendering."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save radar-sdk-js maplibre-gl\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Radar from 'radar-sdk-js';\n\nimport 'radar-sdk-js/dist/radar.css';\n\nclass RadarMap extends React.Component {\n  componentDidMount() {\n    Radar.initialize('prj_live_pk_...');\n\n    const map = new Radar.ui.map({\n      container: 'map',\n      style: 'radar-default-v1',\n      center: [-73.9911, 40.7342], // NYC\n      zoom: 14,\n    });\n\n    Radar.ui.marker({ text: 'Radar HQ' })\n      .setLngLat([-73.9910078, 40.7342465])\n      .addTo(map);\n  }\n\n  render() {\n    return (\n      <div id=\"map-container\" style={{ height: '100%', position: 'absolute', width: '100%' }}>\n        <div id=\"map\" style={{ height: '100%', position: 'absolute', width: '100%' }} />\n      </div>\n    );\n  }\n};\n\nexport default RadarMap;\n")),(0,i.kt)("h3",{id:"vue"},"Vue"),(0,i.kt)("p",null,"To create a ",(0,i.kt)("a",{parentName:"p",href:"https://vuejs.org"},"Vue")," component with a map:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save radar-sdk-js maplibre-gl\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"<template>\n  <div id=\"map-container\">\n    <div id=\"map\" ref=\"mapRef\" />\n  </div>\n</template>\n\n<script>\nimport Radar from 'radar-sdk-js';\nimport { shallowRef, onMounted, onUnmounted, markRaw } from 'vue';\n\nexport default {\n  name: 'RadarMap',\n  setup () {\n    const mapRef = shallowRef(null);\n    const map = shallowRef(null);\n\n    onMounted(() => {\n      Radar.initialize('prj_live_pk_...');\n\n      map.value = markRaw(Radar.ui.map({\n        container: mapRef.value,\n        style: 'radar-default-v1',\n        center: [-73.9911, 40.7342], // NYC\n        zoom: 11\n      }));\n\n      Radar.ui.Marker({ color: '#007aff' })\n        .setLngLat([-73.9911, 40.7342]) // Radar HQ\n        .addTo(map.value);\n    }),\n\n    onUnmounted(() => {\n      map.value?.remove();\n    })\n\n    return {\n      map, mapRef\n    };\n  }\n};\n<\/script>\n\n<style>\n@import 'radar-sdk-js/dist/radar.css';\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n#map-container {\n  height: 100%;\n  position: absolute;\n  width: 100%;\n}\n\n#map {\n  height: 100%;\n  position: absolute;\n  width: 100%;\n}\n</style>\n")),(0,i.kt)("h3",{id:"react-native"},"React Native"),(0,i.kt)("p",null,"To create a ",(0,i.kt)("a",{parentName:"p",href:"https://react.dev"},"React Native")," component with a map:"),(0,i.kt)(l.Z,{alertType:"info",mdxType:"Alert"},"The Radar SDK has a dependency on maplibre-react-native for the map rendering."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save react-native-radar @maplibre/maplibre-react-native\n")),(0,i.kt)("p",null,"Next, complete any required ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/maplibre/maplibre-react-native/blob/main/docs/GettingStarted.md#review-platform-specific-info"},"platform specific installation steps"),"."),(0,i.kt)("p",null,"Get started by initializing the Radar SDK and using ",(0,i.kt)("inlineCode",{parentName:"p"},"<Map>"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View } from 'react-native';\nimport Radar, { Map } from 'react-native-radar';\nimport MapLibreGL from '@maplibre/maplibre-react-native';\n\n    \n// MapLibre requires setting their deprecated access token to null\nMapLibreGL.setAccessToken(null);\n\nRadar.initialize('prj_live_pk_...');\n\nexport default function App() {\n    return (\n        <View style={{ width: '100%', height: '95%'}}>\n            <Map />\n        </View>\n    );\n}\n")),(0,i.kt)("p",null,"You can also add custom pins to the map and control the camera:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"  const [cameraConfig, setCameraConfig] = useState({\n    triggerKey: Date.now(),\n    centerCoordinate: [-73.9911, 40.7342],\n    animationMode: 'flyTo',\n    animationDuration: 600,\n    zoomLevel: 12,\n  });\n\n  const onRegionDidChange = (event) => {\n    // handle region change\n  }\n\n  const mapOptions = {\n    onRegionDidChange: onRegionDidChange,\n  }\n\n  const onSelect = (selectedAddress) => {\n    // Do something with the selected address\n  }\n\n  const pointsCollection = {\n    type: \"FeatureCollection\",\n    features: [{\n      type: \"Feature\",\n      properties: {\n        _id: '123',\n      },\n      geometry: {\n        type: \"Point\",\n        coordinates: [-73.9911, 40.7342]\n      }\n    }]\n  }; \n  \n  const onPressIcon = (event) => {\n    // do something with the symbol, such as scrolling to the geofence\n    // associated with the icon in the list\n  }\n    \n  return (\n    <View style={{ width: '100%', marginTop: '10%', height: '90%'}}>\n      <Map mapOptions={mapOptions}>\n        <MapLibreGL.Camera\n        {...cameraConfig}\n        />\n        <MapLibreGL.Images\n          images={{\n            icon: require('./assets/marker.png'),\n          }}\n        />\n        <MapLibreGL.ShapeSource\n          id=\"points\"\n          shape={pointsCollection}\n          onPress={onPressIcon}\n        >\n\n         <MapLibreGL.SymbolLayer\n            id=\"symbol\"\n            style={{\n              iconImage: 'icon',\n              iconSize: [\n                'interpolate',\n                ['linear'],\n                ['zoom'],\n                0, 0.2, // Adjust the icon size for zoom level 0\n                12, 0.4, // Adjust the icon size for zoom level 12\n                22, 0.8, // Adjust the icon size for zoom level 22\n              ],\n              iconAllowOverlap: true,\n            }}\n          />\n        </MapLibreGL.ShapeSource>\n      </Map>\n    </View>\n  );\n")),(0,i.kt)("h3",{id:"ios"},"iOS"),(0,i.kt)("p",null,"Radar maps can be integrated into an iOS application with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/maplibre/maplibre-native"},"MapLibre Native"),"."),(0,i.kt)("p",null,"To get started, add the MapLibre Native package to your XCode project."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"General")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Frameworks, Libraries, and Embedded Content")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Add item")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Add other")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Add package dependency")),(0,i.kt)("p",null,(0,i.kt)("img",{src:"https://images.ctfassets.net/f2vbu16fzuly/2os3Ew3JE6Ch0fStG0TnGT/73038669bcf2ab31e50d83adff31fb55/Screenshot_2023-07-21_at_3.47.18_PM.png?w=2400",alt:"XCode add MapLibre dependency screenshot"})),(0,i.kt)("p",null,"Then, add the map to your ViewController with Radar's style URL and your publishable key."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'import SwiftUI\nimport Mapbox // NOTE: the MapLibre package is imported as "Mapbox"\n\nstruct MapView: UIViewRepresentable {\n    \n    func makeCoordinator() -> MapView.Coordinator {\n        Coordinator(self)\n    }\n    \n    func makeUIView(context: Context) -> MGLMapView {\n    \n        // ========================\n        // Setup Map\n        // ========================\n\n        // create url (style + publishable key)\n        let styleURL = URL(string: "https://api.radar.io/maps/styles/radar-default-v1?publishableKey=prj_live_pk...")\n\n        // create the map view\n        let mapView = MGLMapView(frame: .zero, styleURL: styleURL)\n        mapView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        mapView.logoView.isHidden = true\n\n        // set the map\u2019s center coordinate and zoom level.\n        mapView.setCenter(\n          CLLocationCoordinate2D(latitude: 40.7342, longitude: -73.9911),\n          zoomLevel: 11,\n          animated: false\n        )\n        \n        // ========================\n        // Add Logo\n        // ========================\n\n        let logoImageView = UIImageView(image: UIImage(named: "radar-logo"))\n        logoImageView.translatesAutoresizingMaskIntoConstraints = false\n        mapView.addSubview(logoImageView)\n\n        NSLayoutConstraint.activate([\n            logoImageView.bottomAnchor.constraint(equalTo: mapView.safeAreaLayoutGuide.bottomAnchor, constant: -10),\n            logoImageView.leadingAnchor.constraint(equalTo: mapView.safeAreaLayoutGuide.leadingAnchor, constant: 10),\n            logoImageView.widthAnchor.constraint(equalToConstant: 74),\n            logoImageView.heightAnchor.constraint(equalToConstant: 26)\n        ])\n\n        mapView.delegate = context.coordinator\n\n        return mapView\n    }\n    \n    func updateUIView(_ uiView: MGLMapView, context: Context) {}\n    \n    // Responds to map events\n    class Coordinator: NSObject, MGLMapViewDelegate {\n        var control: MapView\n\n        init(_ control: MapView) {\n            self.control = control\n        }\n\n        // Add marker to map after loading\n        func mapView(_ mapView: MGLMapView, didFinishLoading style: MGLStyle) {\n            addMarker(style: style, coordinate: CLLocationCoordinate2D(latitude: 40.7342, longitude: -73.9911))\n        }\n\n        func addMarker(style: MGLStyle, coordinate: CLLocationCoordinate2D) {\n            // create point to place marker\n            let point = MGLPointAnnotation()\n            point.coordinate = coordinate\n\n            // create data source to hold point data\n            let shapeSource = MGLShapeSource(identifier: "marker-source", shape: point, options: nil)\n\n            // create a style layer for the symbol\n            let shapeLayer = MGLSymbolStyleLayer(identifier: "marker-style", source: shapeSource)\n\n            // add image to the style\'s sprites\n            if let image = UIImage(named: "default-marker") {\n                style.setImage(image, forName: "marker")\n            }\n\n            // tell the layer to use the image in the sprite\n            shapeLayer.iconImageName = NSExpression(forConstantValue: "marker")\n\n            // add the source and style layer to the map\n            style.addSource(shapeSource)\n            style.addLayer(shapeLayer)\n        }\n    }\n}\n')),(0,i.kt)("p",null,"You can find the assets used for the pin and Radar logo ",(0,i.kt)("a",{target:"_blank",href:a(2426).Z},"here"),"."),(0,i.kt)(l.Z,{alertType:"info",mdxType:"Alert"},"Logo placement is required as defined in the ",(0,i.kt)("a",{href:"https://radar.com/terms"},"Terms of Use"),"."),(0,i.kt)("h3",{id:"android"},"Android"),(0,i.kt)("p",null,"Radar maps can be integrated into an Android application with ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/maplibre/maplibre-native"},"MapLibre Native"),"."),(0,i.kt)("p",null,"To get started, add the MapLibre Native dependency into your module Gradle file (usually located at ",(0,i.kt)("inlineCode",{parentName:"p"},"<project>/<app-module>/build.gradle"),"). Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"<version>")," with the latest MapLibre Native version (e.g.: ",(0,i.kt)("inlineCode",{parentName:"p"},"org.maplibre.gl:android-sdk:10.2.0"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"dependencies {\n    ...\n    implementation 'org.maplibre.gl:android-sdk:<version>'\n    ...\n}\n")),(0,i.kt)("p",null,"Then, import the Radar Map assets. Go to ",(0,i.kt)("inlineCode",{parentName:"p"},"View")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Tool Windows")," > ",(0,i.kt)("inlineCode",{parentName:"p"},"Resource Manager"),'. Click the + button below Resource Manager and select "Import Drawables." Import the radar map assets you need for your application. The assets can be found below this section.'),(0,i.kt)("p",null,(0,i.kt)("img",{src:"https://images.ctfassets.net/f2vbu16fzuly/5I4DeUd6fkwDgfO5mk62dt/8148400ae165abaa6a1bebaae973a18a/image.png?w=2400",alt:"XCode add MapLibre dependency screenshot"})),(0,i.kt)("p",null,"Next, open your layout XML file where you want to display the radar map. Add a MapView element to the layout:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<?xml version="1.0" encoding="utf-8"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <com.mapbox.mapboxsdk.maps.MapView\n        android:id="@+id/mapView"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        />\n\n    \x3c!-- The radar logo --\x3e\n    <ImageView\n        android:id="@+id/overlayImageView"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:src="@drawable/radar_logo"\n        app:layout_constraintBottom_toBottomOf="@id/mapView"\n        app:layout_constraintStart_toStartOf="@id/mapView"\n        android:layout_marginBottom="10dp"\n        android:layout_marginStart="10dp" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>\n')),(0,i.kt)("p",null,"Finally, initialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"MapView")," in your activity file with Radar's style URL and your publishable key. Add a pin to the map. Remember to use the assets you imported earlier for the pin and Radar logo."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'import android.os.Bundle\nimport android.view.Gravity\nimport android.view.LayoutInflater\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.res.ResourcesCompat\nimport androidx.core.graphics.drawable.toBitmap\n\n// the MapLibre package is imported as "Mapbox"\nimport com.mapbox.mapboxsdk.Mapbox\nimport com.mapbox.mapboxsdk.annotations.IconFactory\nimport com.mapbox.mapboxsdk.annotations.MarkerOptions\nimport com.mapbox.mapboxsdk.camera.CameraPosition\nimport com.mapbox.mapboxsdk.geometry.LatLng\nimport com.mapbox.mapboxsdk.maps.MapView\nimport com.mapbox.mapboxsdk.maps.MapboxMap\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var mapView: MapView\n    private lateinit var mapboxMap: MapboxMap\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // create url (style + publishable key)\n        val key = "prj_live_pk_..."\n        val style = "radar-default-v1"\n        val styleURL = "https://api.radar.io/maps/styles/$style?publishableKey=$key"\n\n        // init MapLibre\n        Mapbox.getInstance(this)\n\n        // init layout view\n        val inflater = LayoutInflater.from(this)\n        val rootView = inflater.inflate(R.layout.activity_main, null)\n        setContentView(rootView)\n\n        // init the MapView\n        mapView = rootView.findViewById(R.id.mapView)\n\n        mapView.getMapAsync { map ->\n            // callback for map done loading\n            mapboxMap = map\n            // remove default logo and replace with Radar logo in activity_main.xml\n            map.uiSettings.isLogoEnabled = false\n\n            // anchor attribution to bottom right\n            map.uiSettings.attributionGravity = Gravity.RIGHT + Gravity.BOTTOM\n            map.uiSettings.setAttributionMargins(0,0,24,24)\n\n            map.setStyle(styleURL)\n            // add marker, set map\'s center coordinate and zoom level\n            addMarker(LatLng(40.7342,-73.9911))\n            map.cameraPosition = CameraPosition.Builder().target(LatLng(40.7342,-73.9911)).zoom(11.0).build()\n        }\n\n    }\n\n    private fun addMarker(coordinate: LatLng){\n        // get bitmap for marker icon\n        val infoIconDrawable = ResourcesCompat.getDrawable(\n            this.resources,\n            // use imported marker resource\n            R.drawable.default_marker,\n            null\n        )!!\n        // create icon bmp\n        val bitmapMarker = infoIconDrawable.toBitmap()\n        val icon = IconFactory.getInstance(this)\n            .fromBitmap(bitmapMarker)\n\n        // create point to place marker\n        val markerOptions = MarkerOptions()\n            .position(coordinate)\n            .icon(icon)\n        mapboxMap.addMarker(markerOptions)\n    }\n\n    override fun onStart() {\n        super.onStart()\n        mapView.onStart()\n    }\n\n    override fun onResume() {\n        super.onResume()\n        mapView.onResume()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        mapView.onPause()\n    }\n\n    override fun onStop() {\n        super.onStop()\n        mapView.onStop()\n    }\n\n    override fun onLowMemory() {\n        super.onLowMemory()\n        mapView.onLowMemory()\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        mapView.onDestroy()\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        mapView.onSaveInstanceState(outState)\n    }\n}\n')),(0,i.kt)("p",null,"You can find the assets used for the pin and Radar logo ",(0,i.kt)("a",{target:"_blank",href:a(2426).Z},"here"),"."),(0,i.kt)(l.Z,{alertType:"info",mdxType:"Alert"},"Logo placement is required as defined in the ",(0,i.kt)("a",{href:"https://radar.com/terms"},"Terms of Use"),"."),(0,i.kt)("h2",{id:"coverage"},"Coverage"),(0,i.kt)("p",null,"Radar map data comes from ",(0,i.kt)("a",{parentName:"p",href:"https://www.openstreetmap.org"},"OpenStreetMap"),"."),(0,i.kt)("p",null,"The following table describes data coverage for maps, by country, for consumer use cases (e.g., store locators) and logistics use cases (e.g., ride sharing, delivery)."),(0,i.kt)("h4",{id:"legend"},"Legend"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Icon"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24"),(0,i.kt)("td",{parentName:"tr",align:null},"Great data quality and availability")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("span",{style:{"font-size":"125%"}},"\u25d0")),(0,i.kt)("td",{parentName:"tr",align:null},"Good data quality and availability")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("span",{style:{"font-size":"120%"}},"\u25ef")),(0,i.kt)("td",{parentName:"tr",align:null},"Approximate data quality and availability")))),(0,i.kt)("h4",{id:"coverage-1"},"Coverage"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"\xa0"),(0,i.kt)("th",{parentName:"tr",align:null},"Maps"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\uddfa\ud83c\uddf8 US (consumer)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\uddfa\ud83c\uddf8 US (logistics)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\udde8\ud83c\udde6 CA (consumer)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\udde8\ud83c\udde6 CA (logistics)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\uddec\ud83c\udde7 UK (consumer)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\uddec\ud83c\udde7 UK (logistics)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\udf0e Other (consumer)"),(0,i.kt)("td",{parentName:"tr",align:null},"\u2b24")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"\ud83c\udf0e Other (logistics)"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("span",{style:{"font-size":"125%"}},"\u25d0"))))),(0,i.kt)("h2",{id:"support"},"Support"),(0,i.kt)("p",null,"Have questions? We're here to help! Email us at ",(0,i.kt)("a",{parentName:"p",href:"mailto:support@radar.com"},"support@radar.com"),"."))}g.isMDXComponent=!0},2426:function(e,t,a){t.Z=a.p+"assets/files/radar-map-assets-10a2451b64cea4d72fffe99b24b208e8.zip"}}]);